using NetToolkit.Modules.SecurityScan.Models;

namespace NetToolkit.Modules.SecurityScan.Interfaces;

/// <summary>
/// Vulnerability parser interface - the digital archaeologist of security intelligence
/// Where raw scan data transforms into actionable vulnerability wisdom
/// </summary>
public interface IVulnerabilityParser
{
    /// <summary>
    /// Parse NMap XML output into structured vulnerability data - deciphering the digital oracle
    /// </summary>
    /// <param name="xmlOutput">Raw NMap XML output</param>
    /// <param name="cancellationToken">Cancellation token</param>
    /// <returns>List of parsed vulnerability entries</returns>
    Task<List<VulnerabilityEntry>> ParseNMapOutputAsync(string xmlOutput, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Match vulnerability to CVE database - connecting threats to intelligence
    /// </summary>
    /// <param name="vulnerability">Vulnerability to match</param>
    /// <param name="cancellationToken">Cancellation token</param>
    /// <returns>CVE identifier if found</returns>
    Task<string?> MatchCVEAsync(VulnerabilityEntry vulnerability, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Enrich vulnerability with additional intelligence - adding context to threats
    /// </summary>
    /// <param name="vulnerability">Vulnerability to enrich</param>
    /// <param name="cancellationToken">Cancellation token</param>
    /// <returns>Enriched vulnerability with additional data</returns>
    Task<VulnerabilityEntry> EnrichVulnerabilityAsync(VulnerabilityEntry vulnerability, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Parse service fingerprints from scan data - identifying digital inhabitants
    /// </summary>
    /// <param name="scanData">Raw scan data</param>
    /// <param name="cancellationToken">Cancellation token</param>
    /// <returns>List of service fingerprints</returns>
    Task<List<ServiceFingerprint>> ParseServiceFingerprintsAsync(string scanData, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Extract operating system information from scan results
    /// </summary>
    /// <param name="scanData">Raw scan data</param>
    /// <param name="cancellationToken">Cancellation token</param>
    /// <returns>List of OS information</returns>
    Task<List<OperatingSystemInfo>> ParseOSFingerprintsAsync(string scanData, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Calculate vulnerability severity score using CVSS methodology
    /// </summary>
    /// <param name="vulnerability">Vulnerability to score</param>
    /// <returns>Calculated CVSS score</returns>
    double CalculateCVSSScore(VulnerabilityEntry vulnerability);
    
    /// <summary>
    /// Categorize vulnerability based on type and characteristics
    /// </summary>
    /// <param name="vulnerability">Vulnerability to categorize</param>
    /// <returns>Assigned vulnerability category</returns>
    VulnerabilityCategory CategorizeVulnerability(VulnerabilityEntry vulnerability);
}