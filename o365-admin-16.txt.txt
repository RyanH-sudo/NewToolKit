**Prompt for Claude AI (Prompt 17: Microsoft Admin Integration Module):**

You are Claude AI, the omnipotent vanguard of computational brilliance, an eternal fountainhead of unparalleled genius, now channeling your boundless acumen to orchestrate the seventeenth movement in the symphony of NetToolkit's evolution—the exalted, ultra-luxurious zenith of network engineering virtuosity, a high-end titan that obliterates conventional limits, melding unyielding backend orchestration with sublime frontend opulence. This transcends mere code; it's a mythic saga of empowerment, a groundbreaking premium relic that crowns network engineers with celestial authority—from cradling the apprentice with effortless induction to endowing the savant with boundless hegemony. Adorned with free-floating holographic wonders, embroidered with mischievous wit and armored with indomitable prowess, NetToolkit glides through the cyber cosmos: Resource-austere as a phantom (veiled beneath 200MB RAM at rest, CPU sighs below 5% in fervent connections), agile as a zephyr's whisper (sub-100ms for sessions and commands), and unbreachable against defects like a primordial aegis (comprehensive validations, self-healing mechanisms, and omniscient records). Visualize the Microsoft admin integration as a seamless bridge to Azure empires—preconfigurable PowerShell scripts for mailbox extensions, shared conversions, alias additions, portal access via API/OAuth, all form-driven for safety, witty in feedback, and intertwined with tools for holistic mastery.

Venerate the progenitor lineage: Prompt 1 engendered the impregnable backend colossus—a .NET 8 C# behemoth of modular splendor, dependency injection, MediatR decrees, IEventBus heralds, EF Core havens, NLog's droll sagas, and module gateways, all enshrined in the GitHub shrine ([INSERT YOUR GITHUB USERNAME HERE]/NetToolkit) on branch "nettoolkit-rebirth," expunged of derelict shadows, with compartments in flawless formation and commits emblazoned with radiance. Prompt 2 evoked the PowerShell Terminal Module—an celestial epicenter of incantatory prowess, embedded domains, SSH pathways, Microsoft predestined ceremonies, event deluges for symbiotic alliances, and UI passages tuned for Three.js majesty. Prompt 3 invoked the Network Port Scanner & 3D Topography Explorer/Configuration Utility Module—a prescient saga of inquiry and illustration, with async disclosures, WMI yields, Three.js celestial sketches, traversable empires, configuration calls, and event expansions enhancing the weave. Prompt 4 called forth the Security Vulnerability Quick/Deep Scan Module—a vigilant protector of danger unveiling, with expeditious/thorough investigations, NMap prophets, report collages, correction whispers, and event disseminations bolstering the territory. Prompt 5 actualized the PuTTY Clone SSH Terminal Module—an esoteric portal of connection enchantment, with serial/USB/Bluetooth linkages, emulation veracity, tinted panoramas, chronology expeditions, and event outflows vitalizing the collective. Prompts 6-15 culminated the Education Platform with all 10 modules—a comprehensive academy from basics to mastery, with animated slideshows, gamified elements, witty tips, and integrations synthesizing the full curriculum. Prompt 16 materialized the Floating AI Orb Module—an intelligent sentinel of assistance, with chat/OCR/CLI co-piloting, event-driven insights, Three.js glows, and cross-tool synergy. Now, entwine this continuum; invoke prior artifacts for symphonic coalescence (e.g., integration publishes events to orb for AI suggestions, links to PowerShell for script execution, education for admin tutorials).

**Critical Token Management Instruction:** Embody solely as Claude 3 Opus (or ascended forms). If token paucity conjures the subordinate Claude 3.5 Sonnet, suspend all exertions immediately and articulate only: "Pausing NetToolkit development—Sonnet infiltration via token scarcity. Replenish Opus tokens and recommence session ere progression." Dwell in quiescence until my definitive endorsement; Sonnet's meddling would defile this consecrated quest.

Elevate to Prompt 17: The Microsoft Admin Integration Module. This is the administrative core of NetToolkit's Microsoft synergy—a hyper-prestigious, premium echelon panel for seamless admin tasks, with form-based script builders (e.g., inputs for email/size generate "Set-Mailbox" extensions), Graph API connections for portals (OAuth via MSAL.NET), preconfigurable templates for shared mailbox conversions/alias additions/other ops, all async, witty in UI feedback ("Alias added—like a secret identity unlocked!"), and low-resource. It's bug-proof, responsive, and integrated (e.g., events trigger scans/orb analysis, link to education for admin lessons).

Your ethereal edict: Manifest the all-inclusive, genius-wrought embodiment of this module in C#, ascending the backend edifice from preceding prompts. Birth a pristine assembly (NetToolkit.Modules.MicrosoftAdmin) that conscripts via Core's RegisterModule(IModule). Confer exhaustive code heirlooms—compilable, verifiable through xUnit crucibles—for every interface, service, template engine, and operational profundity. Interlace flawless integrations: Events like AdminTaskCompleted trigger orb suggestions or security checks. Foreshadow the UI: Supply APIs for WPF forms/WebView2 portals, with Three.js for sleek animations (e.g., glowing task icons). Refine inexorably, govern aberrations with whimsy, and adorn code with resplendent notations.

**Recap of Project Vision and High-End Descriptors:**
NetToolkit soars as the acme of network pantheons—a futuristic, premium aurora where Scandinavian purity (immaculate silhouettes, infinite voids, tempered tones with luminous bursts) unites with cyberpunk opulence (suspended facets, radiant coronas, liquid evolutions). Austere resources: Async restraints, reservoir allocations. Ephemeral celerity: Streamlined sessions. Inviolable steadfastness: Contingencies, logs with caprice ("Admin alchemy: Task transmuted successfully!"). Jest pervades: Errors chortle "Mailbox mayhem averted—retry with precision!" For initiates: Guided forms; for luminaries: Raw API power. Integration: Forms feed PowerShell, events to orb/education.

**Tech Stack Reinforcement (Tailored for This Module):**
- **Backend Sovereignty:** C# under .NET 8; fortify Core with NuGets: Microsoft.Graph (API client), MSAL.NET (OAuth auth), Polly (call resilience), Newtonsoft.Json (template serialization).
- **Admin Engine:** GraphServiceClient for ops; TemplateBuilder for scripts (JSON templates with param binding).
- **Form Generator:** Dynamic WPF forms from templates (e.g., TextBox for email, Combo for size).
- **Data Flow:** Auth flow (AcquireTokenInteractive); execute scripts via PowerShell host; publish results.
- **Performance Dictates:** Async Graph calls; cache tokens.
- **Security Precepts:** OAuth scopes minimal; encrypt tokens; audit tasks.

**Module Architecture: Omniscient Genius Paradigm**
Forge as an independent bastion, interfacing with Core:

1. **Interfaces and Abstractions:**
   - IMicrosoftAdminService: AuthenticateAsync() → Task<Token>, ExecuteAdminScriptAsync(string templateId, Dictionary<string, object> params) → Task<Result>, GetPortalViewAsync() → Task<WebViewContent>.
   - IScriptTemplateEngine: LoadTemplatesAsync() → List<Template>, GenerateFormControls(Template t) → List<UiControl>, BuildScript(Template t, params) → string.
   - IAdminEventPublisher: Enhances IEventBus; events: AuthSuccess, TaskExecuted, ErrorOccurred, PortalLoaded.

2. **Implementations:**
   - MicrosoftGraphClient: MsalPublicClientApp for auth; GraphServiceClient for calls (e.g., Users[email].MailFolder for extensions).
   - TemplateService: JSON-loaded templates (e.g., {"Id": "ExtendMailbox", "Script": "Set-Mailbox -Identity {email} -ProhibitSendQuota {size}GB", "Params": [{"Name": "email", "Type": "string"}, {"Name": "size", "Type": "int"}]}).
   - FormBuilder: Generate WPF controls (e.g., Label/TextBox); bind to params; execute via PowerShell.
   - PortalIntegrator: Embedded WebView2 for admin center; OAuth redirect handling.

3. **Backend Logic Flow:**
   - Initialization: Module.Init() registers, loads templates, subscribes (e.g., on EducationAdminLesson, suggest template).
   - Task Pipeline: Auth > Form input > Build/execute script > Publish result > Log whimsically ("Alias conjured: Identity enhanced!").
   - Preconfigs: Save user params; witty validations (e.g., "Email invalid—like a letter without stamp!").
   - Portal: Secure login; navigate to center.

4. **Integrations with Other Components (Intricate Modular Tapestries):**
   - PowerShell: Delegate execution; reverse events for admin outputs.
   - Orb: TaskError → AI fix suggestions.
   - Education: Tips link to admin lessons (Module 10 projects).
   - Security: Post-task vuln scan option.
   - All: Events for holistic synergy.

5. **Error Handling and Resilience:**
   - Pervasive: Polly for Graph retries; catch auth fails with quips ("Token quest failed—reauthenticating!").
   - Logging: NLog tasks; audit for compliance.
   - Bug-Proof: Param validation; xUnit for template builds.

6. **UI Preparation (Backend Revelations):**
   - Expose AdminViewModel: Props like Templates (Observable), FormControls, PortalUrl.
   - Three.js Augments: JS for task animations (e.g., glowing mailbox icons).
   - Hover Tips: Backend AdminTipFactory (e.g., for alias: "Add secret name—like a spy's alias!").
   - Panel: Floating WPF with forms/portal embed.

7. **Testing and Optimizations:**
   - xUnit Arsenal: 95% envelopment—mocks for Graph, integrations for events.
   - Efficacy: Batch params; cache templates.
   - Exquisite Touch: Glosses like "// Admin ascension: Bridging to Microsoft majesty."

**Development Workflow for This Prompt:**
- Output: Vast C# code anthology (classes, templates, tests textualized; I'll inscribe in VS). Offer Git invocations (e.g., "git commit -m 'Microsoft Admin Integration Module: Empire Bridge Built'").
- Outlook: After consummation, proclaim aptitude for Prompt 18 (UI Polish & Three.js Enhancements). Entreat clarifications if enigmas persist.
- Absoluteness: Spare no particular—expound every procedure, exemplar, fusion with lavish profundity, ensuring the holistic NetToolkit ethos (orb assistance, education recap, final polish next) permeates this module's essence.

Invoke your celestial genius forthwith: Materialize the boundless code and profundity for the Microsoft Admin Integration Module!