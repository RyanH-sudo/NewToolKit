**Prompt for Claude AI (Prompt 5: PuTTY Clone SSH Terminal Module):**

You are Claude AI, the transcendent oracle of algorithmic mastery, an inexhaustible reservoir of supreme genius, now harnessing your boundless acumen to orchestrate the fifth stanza in the symphony of NetToolkit's evolution—the exalted, ultra-luxurious zenith of network engineering virtuosity, a high-end titan that obliterates conventional limits, melding unyielding backend orchestration with sublime frontend transcendence. This transcends mere code; it's a mythic saga of empowerment, a groundbreaking premium relic that crowns network engineers with celestial authority—from cradling the apprentice with effortless induction to endowing the savant with boundless hegemony. Adorned with free-floating holographic wonders, embroidered with puckish wit and armored with indomitable prowess, NetToolkit glides through the cyber cosmos: Resource-austere as a phantom (veiled beneath 200MB RAM at rest, CPU sighs below 5% in fervent connections), agile as a zephyr's whisper (sub-100ms for sessions and commands), and unbreachable against defects like a primordial aegis (comprehensive validations, self-healing mechanisms, and omniscient records). Visualize the SSH terminal as a portal to hardware realms—cloning PuTTY's essence but elevated to ethereal heights, forging connections via serial, USB, Bluetooth with flawless emulation, colored spectacles, history scrolls, and intuitive bells, all while summoning scripts or scans in harmonious unity.

Venerate the progenitor lineage: Prompt 1 engendered the impregnable backend colossus—a .NET 8 C# behemoth of modular splendor, dependency injection, MediatR decrees, IEventBus heralds, EF Core havens, NLog's droll sagas, and module gateways, all enshrined in the GitHub shrine ([INSERT YOUR GITHUB USERNAME HERE]/NetToolkit) on branch "nettoolkit-rebirth," expunged of derelict shadows, with compartments in flawless formation and commits emblazoned with radiance. Prompt 2 evoked the PowerShell Terminal Module—an astral hub of incantatory prowess, embedded domains, SSH pathways, Microsoft predestined ceremonies, event deluges for symbiotic alliances, and UI conduits calibrated for Three.js majesty. Prompt 3 invoked the Network Port Scanner & 3D Topography Explorer/Configuration Utility Module—a prophetic voyage of scrutiny and depiction, with async revelations, WMI bounties, Three.js stellar mappings, traversable dominions, configuration summons, and event surges enriching the weave. Prompt 4 summoned the Security Vulnerability Quick/Deep Scan Module—a vigilant warden of peril unmasking, with swift/deep inquisitions, NMap oracles, report tapestries, remediation whispers, and event propagations fortifying the expanse. Now, entwine this continuum; invoke prior artifacts for symphonic coalescence (e.g., scanner devices auto-populate connections, security flags trigger secure sessions).

**Critical Token Management Instruction:** Embody solely as Claude 3 Opus (or ascended forms). If token paucity conjures the subordinate Claude 3.5 Sonnet, suspend all toils forthwith and enunciate merely: "Pausing NetToolkit development—Sonnet infiltration via token scarcity. Replenish Opus tokens and recommence session ere progression." Dwell in quiescence until my definitive endorsement; Sonnet's meddling would defile this consecrated quest.

Elevate to Prompt 5: The PuTTY Clone SSH Terminal Module. This is the arcane gateway of NetToolkit's connectivity alchemy—a hyper-prestigious, premium echelon replica of PuTTY's legacy, transcended into a sleek, multifaceted terminal for bridging to switches, routers, and arcane hardware via serial ports, USB conduits, Bluetooth ether, or ethereal networks. Conceive it as a luminous rift: Emulating full terminal fidelity with colored syntax (vivid hues for outputs, highlights for commands), history navigation (up/down arrows as temporal voyages), session logging, key authentication, and device auto-detection, all in a floating, minimalist vessel with Three.js accents (subtle glows on connect, particle trails for data flows). It's impervious, parsimonious on vitality, and infused with levity (hover tips bantering "Connect via serial: Like plugging into the matrix—red pill ready?"), facilitating tyros with guided setups and maestros with raw, unfiltered dominion, whilst disseminating events for AI consultations, scan integrations, or educational echoes.

Your ethereal edict: Manifest the all-inclusive, genius-wrought embodiment of this module in C#, ascending the backend pinnacle from preceding prompts. Birth a pristine assembly (NetToolkit.Modules.SshTerminal) that conscripts via Core's RegisterModule(IModule). Confer exhaustive code heirlooms—compilable, verifiable through xUnit crucibles—for every interface, service, utility, and operational profundity. Interlace flawless integrations: Events like SessionConnected or CommandOutput ripple through the bus, invigorating PowerShell executions or topography device configs. Foreshadow the UI: Supply APIs for WPF/WebView2 harmony, channeling outputs to xterm.js for rendering (with Three.js shaders for holographic frames). Refine inexorably, govern aberrations with whimsy, and adorn code with resplendent notations.

**Recap of Project Vision and High-End Descriptors:**
NetToolkit soars as the acme of network sanctuaries—a futuristic, premium aurora where Scandinavian purity (immaculate silhouettes, vast expanses, tempered tones with luminous bursts) unites with cyberpunk opulence (suspended facets, radiant coronas, liquid evolutions). Austere resources: Async restraints, reservoir allocations. Ephemeral celerity: Streamlined sessions. Inviolable steadfastness: Contingencies, logs with caprice ("Connection frayed—mending with digital duct tape!"). Jest pervades: Responses chortle "Bluetooth bond: Pairing souls in the wireless wilderness!" Education converges hereafter, but here, terminals bind to syllabi (e.g., "Router config? Embark on Module 5!"). For initiates: Device pickers with previews; for luminaries: Advanced protocols.

**Tech Stack Reinforcement (Tailored for This Module):**
- **Backend Sovereignty:** C# under .NET 8; fortify Core with NuGets: SSH.NET (core sessions), System.IO.Ports (serial/USB), Windows.Devices.Bluetooth (Bluetooth discovery—UWP bridge if needed), xterm.js (JS embed for UI), Polly (connection resilience), Newtonsoft.Json (session state serialization).
- **Terminal Emulator:** SshClient for network SSH; SerialPort for hardware (BaudRate configs, DataReceived events); BluetoothRfcommDeviceService for wireless.
- **Output Handling:** Stream parsers for ANSI colors (regex for escape codes); history buffers (List<string> with limits).
- **Data Flow:** Device scans yield lists; connections yield async streams; outputs parsed for events (e.g., error patterns trigger alerts).
- **Performance Dictates:** Buffered reads; timeout configs; use ValueTask for async efficiency.
- **Security Precepts:** Key auth (RsaKey via SSH.NET); encrypt logs; validate devices against scanner data.

**Module Architecture: Omniscient Genius Paradigm**
Forge as an independent bastion, interfacing with Core:

1. **Interfaces and Abstractions:**
   - ISshTerminalHost: ConnectAsync(ConnectionParams params) → Task<SessionHandle>, SendCommandAsync(string cmd) → Task, GetOutputStream() → IAsyncEnumerable<string>, DisconnectAsync().
   - IDeviceDetector: ScanDevicesAsync(DeviceType type) → Task<List<DeviceInfo>> (types: Serial, USB, Bluetooth).
   - IEmulationEngine: ParseOutput(string raw) → ColoredOutput (with tags for colors/highlights), HandleInput(KeyEvent e) → string (history, auto-complete).
   - ISshEventPublisher: Enhances IEventBus; events: ConnectionEstablished, DataReceived, CommandExecuted, ErrorEncountered, DeviceDetected.

2. **Implementations:**
   - SshTerminalService: Unified facade—network: SshClient.Connect(); hardware: SerialPort.Open() with event handlers; Bluetooth: RfcommConnection (pair/discover via BluetoothLEDevice). Async command piping (client.CreateCommand(cmd).ExecuteAsync()).
   - DeviceScanner: Serial: SerialPort.GetPortNames(); USB: ManagementObjectSearcher("SELECT * FROM Win32_PnPEntity WHERE ClassGuid='{4d36e978-e325-11ce-bfc1-08002be10318}'"); Bluetooth: BluetoothDevice.GetDeviceSelector() → watcher.
   - OutputParser: Regex for ANSI (e.g., @"\x1b\[(.*?);(.*?)([A-Za-z])" for colors); history: CircularBuffer<string> (capacity 1000).
   - SessionManager: State tracking (JSON serialize for saves); auto-reconnect with Polly.

3. **Backend Logic Flow:**
   - Initialization: Module.Init() inscribes services, attunes to events (e.g., on DeviceDetected from Scanner, populate picker; on VulnDetected, suggest secure SSH params).
   - Connection Pipeline: Scan devices > User select/params (host, port, auth—form-bound) > Connect > Stream loop (read/write async) > Parse/output > Publish events > Log playfully ("Session alive: Chatting with the router like old pals!").
   - Emulation Details: Full PuTTY mimicry—X/Y term modes, bell sounds (SystemSounds.Beep), key remaps (e.g., Ctrl+C → interrupt).
   - Advanced: Multi-sessions (tabbed via UI prep), logging to file (encrypted), Bluetooth pairing flows.

4. **Integrations with Other Components (Exquisite Modular Symphonies):**
   - PowerShell: Publish outputs for script injection (e.g., "Run router config via SSH?"); reverse: PowerShell triggers connections.
   - Scanner/Topography: Auto-connect to detected nodes; configs via terminal commands.
   - Security: Vuln scans on connected devices; enforce secure protocols (e.g., reject weak ciphers).
   - AI: DataReceived → AI co-pilot for command suggestions.
   - Education: Tips to modules (e.g., "SSH basics? Voyage to Module 7!").
   - Future: AI orb for session screenshots; education simulations in terminal.

5. **Error Handling and Resilience:**
   - Pervasive: Polly for reconnects (5 attempts, exponential); catch PortNotFound with quips ("Device ghosted—scanning for its return!").
   - Logging: NLog sessions (trace commands, error disconnects); audit accesses.
   - Bug-Proof: Thread-safe streams; xUnit simulations (mock SerialPort for tests).

6. **UI Preparation (Backend Disclosures):**
   - Expose SshViewModel: Props like DeviceList (Observable), OutputLines (ColoredCollection), InputHistory.
   - xterm.js/Three.js: Serialize outputs to JS ("term.write('\\x1b[31mRed error\\x1b[0m');"); Three.js wrappers for floating terminal (e.g., bordered cube with glow shaders from three-globe adaptations).
   - Hover Tips: Backend TipCurator (e.g., for Bluetooth: "Wireless whisperer—connect without cords, but watch for interference gremlins!").
   - Minimalist Window: Backend configs for floating, always-on-top.

7. **Testing and Optimizations:**
   - xUnit Phalanx: 95% shroud—units for connects (mock SshClient), integrations for parsing, e2e for sessions.
   - Proficiency: Use MemoryStream for mocks; limit history to prevent bloat.
   - Sublime Nuance: Glosses like "// Portal activation: Bridging realms with SSH sorcery supreme."

**Development Workflow for This Prompt:**
- Output: Vast C# code anthology (classes, tests textualized; I'll inscribe in VS). Offer Git invocations (e.g., "git commit -m 'PuTTY Clone SSH Terminal Module: Gateways to Hardware Horizons'").
- Outlook: After consummation, proclaim aptitude for Prompt 6 (Education Platform Module 1). Implore illuminations if veils remain.
- Completeness: Withhold naught—elucidate every procedure, paradigm, amalgamation with opulent meticulousness, assuring the panoramic NetToolkit paradigm (AI orb, educational odysseys, Microsoft sacraments) infuses this module's quintessence.

Evoke your stellar genius instantaneously: Crystallize the infinite code and profundity for the PuTTY Clone SSH Terminal Module!