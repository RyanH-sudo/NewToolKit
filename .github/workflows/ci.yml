name: NetToolkit CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: windows-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🔧 Setup Node.js (for Three.js components)
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Restore .NET dependencies
      run: dotnet restore NetToolkit.sln

    - name: 📦 Install Node.js dependencies
      run: |
        if (Test-Path "package.json") { npm ci }

    - name: 🔍 Run code analysis
      run: |
        dotnet format --verify-no-changes --verbosity diagnostic
        dotnet build NetToolkit.sln --configuration Release --no-restore

    - name: 🧪 Run unit tests
      run: |
        dotnet test NetToolkit.sln --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: 📊 Generate code coverage report
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage
        flags: unittests
        name: codecov-umbrella

    - name: 🔒 Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'
      continue-on-error: true

    - name: 📦 Build artifacts
      run: |
        dotnet publish src/UI/NetToolkit.UI/NetToolkit.UI.csproj --configuration Release --output ./publish/NetToolkit --no-restore
        
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: NetToolkit-${{ github.sha }}
        path: ./publish/NetToolkit
        retention-days: 30

  performance-test:
    name: Performance Tests
    runs-on: windows-latest
    needs: build-and-test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: ⚡ Run performance tests
      run: |
        dotnet test tests/NetToolkit.Performance.Tests --configuration Release --logger trx --collect:"XPlat Code Coverage"

    - name: 📊 Performance regression check
      run: |
        # Compare with baseline performance metrics
        # Fail if response time > 100ms or memory usage > 200MB
        echo "Checking performance baselines..."

  security-scan:
    name: Security Analysis
    runs-on: windows-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🔒 Security vulnerability scan
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee vulnerability-report.txt
        if (Select-String "has the following vulnerable packages" vulnerability-report.txt) { 
          Write-Host "::error::Vulnerable packages detected!"
          exit 1 
        }

    - name: 🔍 Code quality analysis
      uses: github/super-linter@v4
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_CSHARP: true
        VALIDATE_JAVASCRIPT: true
        VALIDATE_MARKDOWN: true
        VALIDATE_YAML: true

  release:
    name: Create Release
    runs-on: windows-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🏷️ Generate version number
      id: version
      run: |
        $version = "1.0.${{ github.run_number }}"
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"

    - name: 📦 Build release package
      run: |
        dotnet publish src/UI/NetToolkit.UI/NetToolkit.UI.csproj --configuration Release --output ./release/NetToolkit-${{ steps.version.outputs.version }} --self-contained true --runtime win-x64

    - name: 📤 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: NetToolkit v${{ steps.version.outputs.version }}
        body: |
          ## 🚀 NetToolkit v${{ steps.version.outputs.version }}
          
          **The Ultimate Network Engineering Toolkit**
          
          ### ✨ Features
          - Enterprise-grade network administration
          - AI-powered assistance with OpenAI integration
          - 3D network visualization with Three.js
          - Comprehensive educational modules
          - Real-time security analysis
          
          ### 📋 System Requirements
          - Windows 10/11 or Windows Server 2019+
          - .NET 8 Runtime
          - 4GB RAM minimum, 8GB recommended
          - DirectX 11 compatible graphics card
          
          ### 🔒 Security
          - All packages scanned for vulnerabilities
          - Code analysis passed
          - Performance benchmarks verified
          
          **Full Changelog**: https://github.com/RyanH-sudo/NewToolKit/compare/v${{ steps.version.outputs.version }}
        draft: false
        prerelease: true